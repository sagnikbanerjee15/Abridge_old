#! /usr/bin/env python3

#####################################################################################################################################################################
#
# A standalone script created for the purpose of testing abridge
# Script does not take any inputs and all the required information is hard coded intentionally to prevent it from being accidentally executed in the future
# Script will also perform download and alignment of all sequences
# Can be executed without any changes on Ceres
# 
# Tests carried out by this script:
#     - 2 types of STAR alignments - one with 
# 
#####################################################################################################################################################################

import os
import sys

CPU = 45

def runDockerCommand( name, version, image_location, container_name, volumes, command , cpus = 1, memory = '1g' ):
    """
    Runs the command in a docker container
    """

    # Runs the main command
    docker_cmd = f" docker run "
    # docker_cmd += f" -ti "
    docker_cmd += f" --rm "
    docker_cmd += f" --cpus={cpus}"
    docker_cmd += f" --memory='{memory}'"
    # docker_cmd += f" --name {container_name}"
    for mapping in volumes:
        docker_cmd += f" -v {mapping}"
    docker_cmd += f" {image_location}:{version} "
    docker_cmd += f" bash -c '{command}'"
    #logging.info( f"Running command - {docker_cmd}" )
    os.system( docker_cmd )

def runSingularityCommand(name, version, image_location, container_name, volumes, command , cpus = 1, memory = '1g' ):
    """
    Runs the command in a Singularity container
    """

    # Runs the main command
    
    if "sratools" not in image_location:
        singularity_cmd = f" singularity exec  "
        for mapping in volumes:
            singularity_cmd += f" -B {mapping}"
        singularity_cmd += f" {image_location} "
        singularity_cmd += f" bash -c '{command}'"
    else:
        singularity_cmd = f" singularity exec  "
        for mapping in volumes:
            singularity_cmd += f" -B {mapping}"
        singularity_cmd += f" {image_location} "
        singularity_cmd += f" {command}"
    
    print( f"Running command - {singularity_cmd}" )
    sys.stdout.flush()
    os.system( singularity_cmd )
    

def executeCommand(framework_of_choice, software, version, volumes_list, singularity_sif_location, cmd):
    """
    Executes the command within the requested framework
    """
    if framework_of_choice == "docker":
        runDockerCommand( 
                          name = software,
                            version = version,
                            image_location = f"ghcr.io/sagnikbanerjee15/dockerized_tools_and_pipelines/{software}",
                            container_name = f"{software}",
                            volumes = volumes_list,
                            command = cmd,
                            cpus = CPU,
                            memory = '1g'
            )
    elif framework_of_choice == "singularity":
        runSingularityCommand( 
                            name = software,
                            version = version,
                            image_location = singularity_sif_location,
                            container_name = f"{software}",
                            volumes = volumes_list,
                            command = cmd,
                            cpus = CPU,
                            memory = '1g'
                            )

def main():
    list_of_softwares_with_versions = {"sratools":"3.0.0",
                                       "star":"2.7.9a",
                                       "samtools":"1.14"
                                    }
        
    framework_of_choice = "singularity"
    if framework_of_choice == "docker":
        for software in list_of_softwares_with_versions:
            version = list_of_softwares_with_versions[software]
            os.system( f"docker pull ghcr.io/sagnikbanerjee15/dockerized_tools_and_pipelines/{software}:{version}" )
    else:
        for software in list_of_softwares_with_versions:
            version = list_of_softwares_with_versions[software]
            os.system( f"singularity pull /project/maizegdb/sagnik/ABRIDGE/testing/singularity_images/{software}:{version} docker://ghcr.io/sagnikbanerjee15/dockerized_tools_and_pipelines/{software}:{version}" )

    OUTPUT_DIRECTORY_MAIN = "/project/maizegdb/sagnik/ABRIDGE/testing"
    OUTPUT_DIRECTORY_TEMP = "/90dayadata/maizegdb/sagnik/ABRIDGE/testing"
    
    sra_id = "SRR13711353"
    
    for ended in ["SE","PE"]:
        for alignment_type in ["all_tags_Aligned.sortedByCoord.out.sam", "no_tags_Aligned.out.sam"]:
            alignment_filename = f"{OUTPUT_DIRECTORY_MAIN}/alignments/{sra_id}_{ended}_{alignment_type}"
            
            for ignore_alignment_scores in [0, 1]:
                for ignore_all_quality_scores in [0, 1]:
                    for ignore_quality_scores_for_matched_bases in [0, 1]:
                        for ignore_soft_clippings in [0, 1]:
                            for ignore_mismatches in [0, 1]:
                                for ignore_unmapped_reads in [0, 1]:
                                    for skip_shortening_read_names in [0, 1]:
                                        cmd  = f" /project/maizegdb/sagnik/ABRIDGE/Abridge/abridge "
                                        cmd += f" --compress "
                                        
                                        if ignore_alignment_scores == 1:
                                            cmd += f" --ignore_alignment_scores "
                                        if ignore_all_quality_scores == 1:
                                            cmd += f" --ignore_all_quality_scores "
                                        if ignore_quality_scores_for_matched_bases == 1:
                                            cmd += f" --ignore_quality_scores_for_matched_bases "
                                        if ignore_soft_clippings == 1:
                                            cmd += " --ignore_soft_clippings "
                                        if ignore_mismatches == 1:
                                            cmd += " --ignore_mismatches "
                                        if ignore_unmapped_reads == 1:
                                            cmd += " --ignore_unmapped_reads "
                                        if skip_shortening_read_names == 1:
                                            cmd += f" --skip_shortening_read_names "
                                            
                                        cmd += f" --inputalignedfilename  {alignment_filename} "
                                        cmd += f" --keep_intermediate_error_files "
                                        cmd += f" --preserve_all_intermediate_files "
                                        cmd += f" --inputabrfilename {OUTPUT_DIRECTORY_MAIN}/abridge_compressed/{sra_id}_{ended}_{alignment_type}_ignore_alignment_scores_{ignore_alignment_scores}_ignore_all_quality_scores_{ignore_all_quality_scores}_ignore_quality_scores_for_matched_bases_{ignore_quality_scores_for_matched_bases}_ignore_soft_clippings_{ignore_soft_clippings}_ignore_mismatches_{ignore_mismatches}_ignore_unmapped_reads_{ignore_unmapped_reads}_skip_shortening_read_names_{skip_shortening_read_names}"
                                        cmd += f" 1> {OUTPUT_DIRECTORY_MAIN}/abridge_compressed/{sra_id}_{ended}_{alignment_type}_ignore_alignment_scores_{ignore_alignment_scores}_ignore_all_quality_scores_{ignore_all_quality_scores}_ignore_quality_scores_for_matched_bases_{ignore_quality_scores_for_matched_bases}_ignore_soft_clippings_{ignore_soft_clippings}_ignore_mismatches_{ignore_mismatches}_ignore_unmapped_reads_{ignore_unmapped_reads}_skip_shortening_read_names_{skip_shortening_read_names}.output "
                                        cmd += f" 2> {OUTPUT_DIRECTORY_MAIN}/abridge_compressed/{sra_id}_{ended}_{alignment_type}_ignore_alignment_scores_{ignore_alignment_scores}_ignore_all_quality_scores_{ignore_all_quality_scores}_ignore_quality_scores_for_matched_bases_{ignore_quality_scores_for_matched_bases}_ignore_soft_clippings_{ignore_soft_clippings}_ignore_mismatches_{ignore_mismatches}_ignore_unmapped_reads_{ignore_unmapped_reads}_skip_shortening_read_names_{skip_shortening_read_names}.error"
                                        print(f"Starting - {OUTPUT_DIRECTORY_MAIN}/abridge_compressed/{sra_id}_{ended}_{alignment_type}_ignore_alignment_scores_{ignore_alignment_scores}_ignore_all_quality_scores_{ignore_all_quality_scores}_ignore_quality_scores_for_matched_bases_{ignore_quality_scores_for_matched_bases}_ignore_soft_clippings_{ignore_soft_clippings}_ignore_mismatches_{ignore_mismatches}_ignore_unmapped_reads_{ignore_unmapped_reads}_skip_shortening_read_names_{skip_shortening_read_names}")
                                        os.system(cmd)
                                        sys.stdout.flush()
                                        print(f"Completed - {OUTPUT_DIRECTORY_MAIN}/abridge_compressed/{sra_id}_{ended}_{alignment_type}_ignore_alignment_scores_{ignore_alignment_scores}_ignore_all_quality_scores_{ignore_all_quality_scores}_ignore_quality_scores_for_matched_bases_{ignore_quality_scores_for_matched_bases}_ignore_soft_clippings_{ignore_soft_clippings}_ignore_mismatches_{ignore_mismatches}_ignore_unmapped_reads_{ignore_unmapped_reads}_skip_shortening_read_names_{skip_shortening_read_names}")
                                        
                                        cmd = f"mv {OUTPUT_DIRECTORY_MAIN}/abridge_compressed/{sra_id}_{ended}_{alignment_type}_ignore_alignment_scores_{ignore_alignment_scores}_ignore_all_quality_scores_{ignore_all_quality_scores}_ignore_quality_scores_for_matched_bases_{ignore_quality_scores_for_matched_bases}_ignore_soft_clippings_{ignore_soft_clippings}_ignore_mismatches_{ignore_mismatches}_ignore_unmapped_reads_{ignore_unmapped_reads}_skip_shortening_read_names_{skip_shortening_read_names} {OUTPUT_DIRECTORY_MAIN}"
                                        os.system(cmd)
    
                                        
    
    

if __name__ == "__main__":
    main()