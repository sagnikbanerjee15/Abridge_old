#! /usr/bin/env python3

########################################################################################################################################################
# sampleMixtureOfAlignments reads in a SAM alignment file and selects a variety of alignments to ensure all types of scenarios is represented.
# The focus is put more on selecting alignments that have mismatches, multiple splices etc. and not on the number of alignments
#
# Changelist
#
# Write meaningful outputs
########################################################################################################################################################

from argparse import RawTextHelpFormatter
import argparse
import logging
import os
import pprint
import sys
import re
import time
import multiprocessing
import random
import glob
import time
import subprocess
from pprint import pformat

def parseCommandLineArguments():
    parser = argparse.ArgumentParser( prog = "sampleMixtureOfAlignments", description = "sampleMixtureOfAlignments reads in a SAM alignment file and selects a variety of alignments to ensure all types of scenarios is represented.", formatter_class = RawTextHelpFormatter )
    required_named = parser.add_argument_group( 'Required arguments' )

    # Required arguments
    required_named.add_argument( "-o", "--output_filename", help = "Enter the name of the input samfile", required = True )
    required_named.add_argument( "-i", "--input_filename", help = "Enter the name of the output samfile", required = True )

def selectAlignments(options):
    """
    Only 1000 alignments of 
    """

def main():
    commandLineArg = sys.argv
    if len( commandLineArg ) == 1:
        print( "Please use the --help option to get usage information" )
    options = parseCommandLineArguments()
    selectAlignments(options)

if __name__ == "__main__":
    main()